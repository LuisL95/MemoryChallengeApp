/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memorychallengeappv1.framesMCA;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JToolTip;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import memorychallengeappv1.Bloque;
import memorychallengeappv1.Enunciado;
import memorychallengeappv1.GestionEjecucionBloque;
import memorychallengeappv1.connections.ConnectionManager;
import memorychallengeappv1.ejemplo;
import static memorychallengeappv1.ejemplo.fp;
import static memorychallengeappv1.framesMCA.FramePrincipal.fbi;

/**
 *
 * @author ser
 */
public class FrameEleccionTipoBloque extends javax.swing.JFrame {
    int id_bloque = 0;
    /**
     * Creates new form FrameEleccionTipoBloque
     */
    public FrameEleccionTipoBloque(int id_bloqueL) {
        this.id_bloque = id_bloqueL;
        initComponents();
        setLocationRelativeTo(null);
        buttons();
        setResizable(false);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(93, 163, 159));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("¿De qué tipo de bloque quieres que sea?");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(26, 26, 26))
        );

        jPanel2.setBackground(new java.awt.Color(111, 197, 205));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 107, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void toolTip()
    {
//                                 JToolTip tip = super.createToolTip();
//                                tip.setOpaque(true);
//                                UIManager.put("tip.background", Color.white);
//                                tip.setBackground(Color.WHITE);
//                                tip.setForeground(new java.awt.Color(84, 192,115));
//                                Border border = new LineBorder(new java.awt.Color(238,242,239), 2, true);
//                                tip.setBorder(border);
    }
    
        private ActionListener jbAbrirActionPerformed() 
        {                                             
            ActionListener al = new ActionListener() 
            {
                @Override
                public void actionPerformed(ActionEvent e) 
                {
                    FrameConfigBloqueLargo fcbl = new FrameConfigBloqueLargo(id_bloque);
                    fcbl.setVisible(true);
                    fbi.dispose();
                    dispose();
                    
                }
            };
            return al;
        }
        
        private ActionListener jbAbrirCortoActionPerformed() 
        {                                             
            ActionListener al = new ActionListener() 
            {
                @Override
                public void actionPerformed(ActionEvent e) 
                {
                    new Thread() 
                    {
                         public void run() 
                        {
                            activarBloque();
                            Bloque b = new Bloque();
                            b = creacionbloqueActivo();
                            GestionEjecucionBloque geb = new GestionEjecucionBloque(b);
                            geb.run();
                            if(Bloque.bloques.size()>0)
                            {
                                    fp.jButtonParar.setVisible(true);
                                    fp.jLabelNumeroBloques.setText("Bloques existentes: " + Bloque.bloques.size() );
                                    fp.jLabelNumeroBloques.setVisible(true);
                            }
                                       //DEDServer.main(null);
                        }
                    }.start();

                    revalidate();
                    
                    
                }
            };
            return al;
        }  
        
            
        private void activarBloque()
        {
            try 
            {
                long duracionActual = 0;
                long duracionTotal = 0;
                
                
                Connection conn = ConnectionManager.getConnection();
                conn.setAutoCommit(false);
                PreparedStatement stmt = conn.prepareStatement
                (
                "UPDATE db_memorychallengeapp.table_bloque SET estado = 1 WHERE ID_BLOQUE = ?"
                );
                stmt.setInt(1, id_bloque);
                int  updt = stmt.executeUpdate();
               
                PreparedStatement stmtBloque = conn.prepareStatement
               (
                "SELECT * FROM db_memorychallengeapp.table_bloque WHERE ID_BLOQUE = ?"
                );
                stmtBloque.setInt(1, id_bloque);
                ResultSet rs = stmtBloque.executeQuery();
                while(rs.next())
                {
                    duracionActual = rs.getLong("duracion_inicial");
                    duracionTotal = rs.getLong("duracion_total");
                    // = rs.getInt("ID_BLOQUE");

                }
               
                stmt = conn.prepareStatement
                ( 
               "INSERT INTO db_memorychallengeapp.table_bloqueactivocorto (ID_BLOQUE_AC, tiempo_actual, tiempo_total)"
             + " VALUES (?,?,?)"
                );
                stmt.setInt(1, id_bloque);
                stmt.setLong(2, duracionActual);
                stmt.setLong(3, duracionTotal);
                 updt = stmt.executeUpdate();

                stmt = conn.prepareStatement
                (
                "DELETE FROM db_memorychallengeapp.table_bloqueinactivocorto WHERE ID_BLOQUE_IC = ?"
                );
                stmt.setInt(1, id_bloque);
                updt = stmt.executeUpdate();

                conn.commit();
                stmt.close();
                
                
                fbi.dispose();
                    dispose();
                    
            } 
            catch (SQLException e) 
            {
                 ConnectionManager.processException(e);
            }
        }    
            
           
        private Bloque creacionbloqueActivo()
            {
                Bloque b = new Bloque();

                Connection conn;
                try 
                {
                        conn = ConnectionManager.getConnection();
                        PreparedStatement stmtBloque = conn.prepareStatement
                       (
                                "SELECT * FROM db_memorychallengeapp.table_bloque WHERE ID_BLOQUE = ?"
                        );

                    //    stmtBloque.setString(1, ((Integer)id_bloque).toString());
                        stmtBloque.setInt(1, id_bloque);
                        ResultSet rs= stmtBloque.executeQuery();

                        while(rs.next())
                        {
                            
                             b.setID(rs.getInt("ID_BLOQUE"));
                             b.setNombre(rs.getString("nombre"));
                             b.setDuracionTotal(rs.getLong("duracion_total"));
                             b.setDuracionInicial(rs.getLong("duracion_inicial"));
                                     PreparedStatement stmtEnunciado = conn.prepareStatement
                                    (
                                             "SELECT * FROM db_memorychallengeapp.table_enunciado WHERE ID_BLOQUE_E = ?" 
                                     );
                                     stmtEnunciado.setInt(1, b.getID());
                                     ResultSet rse = stmtEnunciado.executeQuery();
                                     while(rse.next())
                                     {
                                         Enunciado e = new Enunciado();
                                         e.setCodigoEnunciado(rse.getString("COD_ENUNCIADO"));
                                         e.setPregunta(rse.getString("pregunta"));
                                         e.setRespuesta(rse.getString("respuesta"));
                                         b.enunciados.add(e);
                                     }
                             Bloque.bloques.add(b);

                                 System.out.println(b.getNombre());
                                 System.out.println(b.getID());
                                 System.out.println(b.getDuracionTotal());
                        }



                    } 
                    catch (SQLException ex) 
                    {
                        Logger.getLogger(ejemplo.class.getName()).log(Level.SEVERE, null, ex);
                    }

                return b;
            }    
    
    
    private void buttons()
    {
                        JButton jbLargo = new JButton();
                        jbLargo.setFont(new Font("TimesNewRoman", Font.BOLD, 12));
                        jbLargo.setText("Largo"); 
                        jbLargo.setBounds(160,30 , 71, 26);
                        jbLargo.setVisible(true);
                        jbLargo.setToolTipText("Elige este si quieres que el bloque se repida por periodo de días o más.");
                        //jb.addActionListener(jbActivarActionPerformed(idBloque));
                        jbLargo.setBackground(Color.WHITE);
                        Border border1 = new LineBorder(new java.awt.Color(162,165,165), 1, true);
                        jbLargo.setBorder(border1);
                        jPanel2.add(jbLargo);
                        jbLargo.addActionListener(jbAbrirActionPerformed());
                        
                        JButton jbCorto = new JButton();
                        jbCorto.setFont(new Font("TimesNewRoman", Font.BOLD, 12));
                        jbCorto.setText("Corto"); 
                        jbCorto.setBounds(45,30 , 71, 26);
                        jbCorto.setVisible(true);
                        jbCorto.setToolTipText("Elige este si quieres que el bloque se repita por un periodo de minutos u horas.");
                        //jb.addActionListener(jbActivarActionPerformed(idBloque));
                        jbCorto.setBackground(Color.WHITE);
                        Border border2 = new LineBorder(new java.awt.Color(162,165,165), 1, true);
                        jbCorto.setBorder(border2);
                        jPanel2.add(jbCorto);
                        jbCorto.addActionListener(jbAbrirCortoActionPerformed());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameEleccionTipoBloque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameEleccionTipoBloque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameEleccionTipoBloque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameEleccionTipoBloque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
         //       new FrameEleccionTipoBloque().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
